// <auto-generated>
// Most of the contents of this file are just simple P/Invoke signatures from
// pinvoke.net and MSDN, we'll count this as auto-generated to make StyleCop
// shut up about all the "grammatical errors".
// </auto-generated>

//---------------------------------------------------------------------------------------
// <copyright file="GDI32.cs" company="SharpBlade">
//     Copyright (c) 2014 by Adam Hellberg and Brandon Scott.
//     Partial copyright (c) 2014 by meekaah.
//
//     Permission is hereby granted, free of charge, to any person obtaining a copy of
//     this software and associated documentation files (the "Software"), to deal in
//     the Software without restriction, including without limitation the rights to
//     use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
//     of the Software, and to permit persons to whom the Software is furnished to do
//     so, subject to the following conditions:
//
//     The above copyright notice and this permission notice shall be included in all
//     copies or substantial portions of the Software.
//
//     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
//     WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
//     CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//     Disclaimer: SharpBlade is in no way affiliated
//     with Razer and/or any of its employees and/or licensors.
//     Adam Hellberg does not take responsibility for any harm caused, direct
//     or indirect, to any Razer peripherals via the use of SharpBlade.
//
//     "Razer" is a trademark of Razer USA Ltd.
// </copyright>
//---------------------------------------------------------------------------------------

using System;
using System.Runtime.InteropServices;

namespace Sharparam.SharpBlade.Native.WinAPI
{
    /// <summary>
    /// Static class containing all functions
    /// provided by the Windows GDI32 library.
    /// </summary>
    public static class GDI32
    {
        /// <summary>
        /// Copies the source rectangle directly to the destination rectangle.
        /// </summary>
        public const int SRCCOPY = 0x00CC0020;

        internal static class NativeMethods
        {
            /// <summary>
            /// DLL file to import functions from.
            /// </summary>
            private const string DllName = "gdi32.dll";

            /// <summary>
            /// The BitBlt function performs a bit-block transfer of the color data corresponding to a rectangle
            /// of pixels from the specified source device context into a destination device context.
            /// </summary>
            /// <param name="hdcDest">A handle to the destination device context.</param>
            /// <param name="nXDest">The x-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            /// <param name="nYDest">The y-coordinate, in logical units, of the upper-left corner of the destination rectangle.</param>
            /// <param name="nWidth">The width, in logical units, of the source and destination rectangles.</param>
            /// <param name="nHeight">The height, in logical units, of the source and the destination rectangles.</param>
            /// <param name="hdcSrc">A handle to the source device context.</param>
            /// <param name="nXSrc">The x-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            /// <param name="nYSrc">The y-coordinate, in logical units, of the upper-left corner of the source rectangle.</param>
            /// <param name="dwRop">
            /// A raster-operation code.
            /// These codes define how the color data for the source rectangle is to be
            /// combined with the color data for the destination rectangle to achieve the final color.
            /// </param>
            /// <returns>
            /// If the function succeeds, the return value is nonzero.
            /// If the function fails, the return value is zero. To get extended error information, call GetLastError.
            /// </returns>
            [DllImport(DllName)]
            internal static extern bool BitBlt(
                IntPtr hdcDest,
                int nXDest,
                int nYDest,
                int nWidth,
                int nHeight,
                IntPtr hdcSrc,
                int nXSrc,
                int nYSrc,
                int dwRop);

            /// <summary>
            /// The CreateCompatibleBitmap function creates a bitmap compatible with
            /// the device that is associated with the specified device context.
            /// </summary>
            /// <param name="hdc">A handle to a device context.</param>
            /// <param name="nWidth">The bitmap width, in pixels.</param>
            /// <param name="nHeight">The bitmap height, in pixels.</param>
            /// <returns>
            /// If the function succeeds, the return value is a handle to the compatible bitmap (DDB).
            /// If the function fails, the return value is NULL.
            /// </returns>
            /// <remarks>
            /// The color format of the bitmap created by the CreateCompatibleBitmap function matches
            /// the color format of the device identified by the hdc parameter.
            /// This bitmap can be selected into any memory device context that
            /// is compatible with the original device.
            /// Because memory device contexts allow both color and monochrome bitmaps,
            /// the format of the bitmap returned by the CreateCompatibleBitmap function
            /// differs when the specified device context is a memory device context.
            /// However, a compatible bitmap that was created for a nonmemory device context
            /// always possesses the same color format and uses the same color palette
            /// as the specified device context.
            /// Note: When a memory device context is created, it initially has a
            /// 1-by-1 monochrome bitmap selected into it.
            /// If this memory device context is used in CreateCompatibleBitmap,
            /// the bitmap that is created is a monochrome bitmap.
            /// To create a color bitmap, use the HDC that was used to create the memory device context,
            /// as shown in the following code:
            /// <code>
            /// HDC memDC = CreateCompatibleDC ( hDC );
            /// HBITMAP memBM = CreateCompatibleBitmap ( hDC, nWidth, nHeight );
            /// SelectObject ( memDC, memBM );
            /// </code>
            /// If an application sets the nWidth or nHeight parameters to zero,
            /// CreateCompatibleBitmap returns the handle to a 1-by-1 pixel, monochrome bitmap.
            /// If a DIB section, which is a bitmap created by the CreateDIBSection function,
            /// is selected into the device context identified by the hdc parameter,
            /// CreateCompatibleBitmap creates a DIB section.
            /// When you no longer need the bitmap, call the DeleteObject function to delete it.
            /// </remarks>
            [DllImport(DllName)]
            internal static extern IntPtr CreateCompatibleBitmap(IntPtr hdc, int nWidth, int nHeight);

            /// <summary>
            /// The CreateCompatibleDC function creates a memory device context (DC) compatible with the specified device.
            /// </summary>
            /// <param name="hdc">
            /// A handle to an existing DC. If this handle is NULL,
            /// the function creates a memory DC compatible with the application's current screen.
            /// </param>
            /// <returns>
            /// If the function succeeds, the return value is the handle to a memory DC.
            /// If the function fails, the return value is NULL (<c>IntPtr.Zero</c>).
            /// </returns>
            /// <remarks>
            /// A memory DC exists only in memory. When the memory DC is created,
            /// its display surface is exactly one monochrome pixel wide and one monochrome pixel high.
            /// Before an application can use a memory DC for drawing operations,
            /// it must select a bitmap of the correct width and height into the DC.
            /// To select a bitmap into a DC, use the CreateCompatibleBitmap function,
            /// specifying the height, width, and color organization required.
            /// When a memory DC is created, all attributes are set to normal default values.
            /// The memory DC can be used as a normal DC. You can set the attributes;
            /// obtain the current settings of its attributes; and select pens, brushes, and regions.
            /// The CreateCompatibleDC function can only be used with devices that support raster operations.
            /// An application can determine whether a device supports these operations by calling the GetDeviceCaps function.
            /// When you no longer need the memory DC, call the DeleteDC function. We recommend that you call DeleteDC to delete the DC.
            /// However, you can also call DeleteObject with the HDC to delete the DC.
            /// If hdc is NULL, the thread that calls CreateCompatibleDC owns the HDC that is created. When this thread is destroyed,
            /// the HDC is no longer valid. Thus, if you create the HDC andpass it to another thread, then exit the first thread,
            /// the second thread will not be able to use the HDC.
            /// ICM: If the DC that is passed to this function is enabled for Image Color Management (ICM),
            /// the DC created by the function is ICM-enabled. The source and destination color spaces are specified in the DC.
            /// </remarks>
            [DllImport(DllName)]
            internal static extern IntPtr CreateCompatibleDC(IntPtr hdc);

            /// <summary>
            /// The DeleteDC function deletes the specified device context (DC).
            /// </summary>
            /// <param name="hdc">A handle to the device context.</param>
            /// <returns>
            /// If the function succeeds, the return value is nonzero (true).
            /// If the function fails, the return value is zero (false).
            /// </returns>
            /// <remarks>
            /// An application must not delete a DC whose handle was obtained by
            /// calling the GetDC function. Instead,
            /// it must call the ReleaseDC function to free the DC.
            /// </remarks>
            [DllImport(DllName)]
            internal static extern bool DeleteDC(IntPtr hdc);

            /// <summary>
            /// The DeleteObject function deletes a logical pen, brush, font, bitmap, region, or palette,
            /// freeing all system resources associated with the object.
            /// After the object is deleted, the specified handle is no longer valid.
            /// </summary>
            /// <param name="hObject">A handle to a logical pen, brush, font, bitmap, region, or palette.</param>
            /// <returns>
            /// If the function succeeds, the return value is nonzero (true).
            /// If the specified handle is not valid or is currently
            /// selected into a DC, the return value is zero (false).
            /// </returns>
            /// <remarks>
            /// Do not delete a drawing object (pen or brush) while it is still selected into a DC.
            /// When a pattern brush is deleted, the bitmap associated with the brush is not deleted.
            /// The bitmap must be deleted independently.
            /// </remarks>
            [DllImport(DllName)]
            internal static extern bool DeleteObject(IntPtr hObject);

            /// <summary>
            /// The SelectObject function selects an object into the specified device context (DC).
            /// The new object replaces the previous object of the same type.
            /// </summary>
            /// <param name="hdc">A handle to the DC.</param>
            /// <param name="hgdiobj">A handle to the object to be selected.</param>
            /// <returns>
            /// If the selected object is not a region and the function succeeds,
            /// the return value is a handle to the object being replaced.
            /// If the selected object is a region and the function succeeds,
            /// the return value is one of the following values.
            /// <list type="bullet">
            /// <item><c>SIMPLEREGION</c>: Region consists of a single rectangle.</item>
            /// <item><c>COMPLEXREGION</c>: Region consists of more than one rectangle.</item>
            /// <item><c>NULLREGION</c>: Region is empty.</item>
            /// </list>
            /// If an error occurs and the selected object is not a region, the return value is NULL.
            /// Otherwise, it is HGDI_ERROR.
            /// </returns>
            /// <remarks>
            /// This function returns the previously selected object of the specified type.
            /// An application should always replace a new object with the original,
            /// default object after it has finished drawing with the new object.
            /// An application cannot select a single bitmap into more than one DC at a time.
            /// ICM: If the object being selected is a brush or a pen, color management is performed.
            /// </remarks>
            [DllImport(DllName)]
            internal static extern IntPtr SelectObject(IntPtr hdc, IntPtr hgdiobj);
        }
    }
}